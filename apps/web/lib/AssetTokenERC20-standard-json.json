{
  "language": "Solidity",
  "sources": {
    "src/AssetTokenERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"./IFixDescriptor.sol\";\nimport \"./FixDescriptorLib.sol\";\n\n/**\n * @title AssetTokenERC20\n * @notice Example ERC20 token with embedded FIX descriptor\n * @dev Demonstrates how to integrate FixDescriptor into an ERC20 token using FixDescriptorLib\n */\ncontract AssetTokenERC20 is ERC20, Ownable, ERC165, IFixDescriptor {\n    using FixDescriptorLib for FixDescriptorLib.Storage;\n\n    /// @notice FIX descriptor storage\n    FixDescriptorLib.Storage private _fixDescriptor;\n\n    /**\n     * @notice Constructor\n     * @param name Token name\n     * @param symbol Token symbol\n     * @param initialSupply Initial token supply\n     * @param initialOwner Address to receive initial supply and ownership\n     */\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 initialSupply,\n        address initialOwner\n    ) ERC20(name, symbol) Ownable(initialOwner) {\n        _mint(initialOwner, initialSupply);\n    }\n\n    /**\n     * @notice Set the FIX descriptor for this asset\n     * @dev Can only be called by owner. Emits appropriate event.\n     * @param descriptor The complete FixDescriptor struct\n     */\n    function setFixDescriptor(FixDescriptor calldata descriptor) external onlyOwner {\n        _fixDescriptor.setDescriptor(descriptor);\n    }\n\n    /**\n     * @inheritdoc IFixDescriptor\n     */\n    function getFixDescriptor() external view override returns (FixDescriptor memory) {\n        return _fixDescriptor.getDescriptor();\n    }\n\n    /**\n     * @inheritdoc IFixDescriptor\n     */\n    function getFixRoot() external view override returns (bytes32) {\n        return _fixDescriptor.getRoot();\n    }\n\n    /**\n     * @inheritdoc IFixDescriptor\n     */\n    function verifyField(\n        bytes calldata pathCBOR,\n        bytes calldata value,\n        bytes32[] calldata proof,\n        bool[] calldata directions\n    ) external view override returns (bool) {\n        return _fixDescriptor.verifyFieldProof(pathCBOR, value, proof, directions);\n    }\n\n    /**\n     * @notice Get CBOR data chunk\n     * @param start Start offset (in the data, not including STOP byte)\n     * @param size Number of bytes to read\n     * @return chunk The requested CBOR data\n     */\n    function getFixCBORChunk(uint256 start, uint256 size)\n        external\n        view\n        returns (bytes memory chunk)\n    {\n        return _fixDescriptor.getFixCBORChunk(start, size);\n    }\n\n    /**\n     * @inheritdoc IFixDescriptor\n     */\n    function getHumanReadableDescriptor() external view override returns (string memory) {\n        return _fixDescriptor.getHumanReadable();\n    }\n\n    /**\n     * @inheritdoc ERC165\n     */\n    function supportsInterface(bytes4 interfaceId) \n        public \n        view \n        virtual \n        override(ERC165) \n        returns (bool) \n    {\n        return interfaceId == FixDescriptorLib.getInterfaceId() || \n               super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /// @inheritdoc IERC20\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /// @inheritdoc IERC20\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "src/IFixDescriptor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title IFixDescriptor\n * @notice Standard interface for assets with embedded FIX descriptors\n * @dev Asset contracts (ERC20, ERC721, etc.) implement this to expose their FIX descriptor\n */\ninterface IFixDescriptor {\n    /// @notice FIX descriptor structure\n    struct FixDescriptor {\n        uint16 fixMajor;           // FIX version major (e.g., 4)\n        uint16 fixMinor;           // FIX version minor (e.g., 4)\n        bytes32 dictHash;          // FIX dictionary/Orchestra hash\n        address dictionaryContract; // FixDictionary contract address for tag name lookups\n        bytes32 fixRoot;           // Merkle root commitment\n        address fixCBORPtr;        // SSTORE2 data contract address\n        uint32 fixCBORLen;         // CBOR data length\n        string fixURI;             // Optional mirror URI (ipfs:// or https://)\n    }\n\n    /// @notice Emitted when descriptor is first set\n    event FixDescriptorSet(\n        bytes32 indexed fixRoot,\n        bytes32 indexed dictHash,\n        address fixCBORPtr,\n        uint32 fixCBORLen\n    );\n\n    /// @notice Emitted when descriptor is updated\n    event FixDescriptorUpdated(\n        bytes32 indexed oldRoot,\n        bytes32 indexed newRoot,\n        address newPtr\n    );\n\n    /**\n     * @notice Get the complete FIX descriptor for this asset\n     * @return descriptor The FixDescriptor struct\n     */\n    function getFixDescriptor() external view returns (FixDescriptor memory descriptor);\n\n    /**\n     * @notice Get the Merkle root commitment\n     * @return root The fixRoot for verification\n     */\n    function getFixRoot() external view returns (bytes32 root);\n\n    /**\n     * @notice Verify a specific field against the committed descriptor\n     * @param pathCBOR Canonical CBOR bytes of the field path\n     * @param value Raw FIX value bytes\n     * @param proof Merkle proof (sibling hashes)\n     * @param directions Direction array (true=right child, false=left child)\n     * @return valid True if the proof is valid\n     */\n    function verifyField(\n        bytes calldata pathCBOR,\n        bytes calldata value,\n        bytes32[] calldata proof,\n        bool[] calldata directions\n    ) external view returns (bool valid);\n\n    /**\n     * @notice Get human-readable FIX descriptor output\n     * @dev Uses dictionaryContract to map tag numbers to names\n     * @return Human-readable FIX string (pipe-delimited format)\n     */\n    function getHumanReadableDescriptor() external view returns (string memory);\n}\n"
    },
    "src/FixDescriptorLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"./IFixDescriptor.sol\";\nimport \"./FixMerkleVerifier.sol\";\nimport \"./FixHumanReadable.sol\";\nimport \"./FixDictionary.sol\";\n\n/**\n * @title FixDescriptorLib\n * @notice Library for managing FIX descriptors in token contracts\n * @dev Use this library to add FIX descriptor functionality to any token (ERC20, ERC721, etc.)\n *      with minimal boilerplate. Compatible with upgradeable and non-upgradeable patterns.\n * \n * Usage:\n *   using FixDescriptorLib for FixDescriptorLib.Storage;\n *   FixDescriptorLib.Storage private _fixDescriptor;\n * \n * Then forward IFixDescriptor interface calls to the storage instance:\n *   function getFixDescriptor() external view returns (FixDescriptor memory) {\n *       return _fixDescriptor.getDescriptor();\n *   }\n */\nlibrary FixDescriptorLib {\n    \n    /**\n     * @notice Storage struct for FIX descriptor state\n     * @dev Use this as a state variable in your token contract\n     */\n    struct Storage {\n        IFixDescriptor.FixDescriptor descriptor;\n        bool initialized;\n    }\n\n    /**\n     * @notice Set or update the FIX descriptor\n     * @dev Emits appropriate event based on whether this is first initialization or update\n     *      This function does NOT enforce access control - wrap it in your contract with \n     *      onlyOwner or other modifiers as needed\n     * @param self Storage reference\n     * @param descriptor The complete FixDescriptor struct\n     */\n    function setDescriptor(\n        Storage storage self,\n        IFixDescriptor.FixDescriptor calldata descriptor\n    ) internal {\n        bytes32 oldRoot = self.descriptor.fixRoot;\n        self.descriptor = descriptor;\n\n        if (self.initialized) {\n            emit IFixDescriptor.FixDescriptorUpdated(\n                oldRoot,\n                descriptor.fixRoot,\n                descriptor.fixCBORPtr\n            );\n        } else {\n            emit IFixDescriptor.FixDescriptorSet(\n                descriptor.fixRoot,\n                descriptor.dictHash,\n                descriptor.fixCBORPtr,\n                descriptor.fixCBORLen\n            );\n            self.initialized = true;\n        }\n    }\n\n    /**\n     * @notice Get the complete FIX descriptor\n     * @param self Storage reference\n     * @return descriptor The FixDescriptor struct\n     */\n    function getDescriptor(Storage storage self)\n        internal\n        view\n        returns (IFixDescriptor.FixDescriptor memory descriptor)\n    {\n        require(self.initialized, \"Descriptor not initialized\");\n        return self.descriptor;\n    }\n\n    /**\n     * @notice Get the Merkle root commitment\n     * @param self Storage reference\n     * @return root The fixRoot for verification\n     */\n    function getRoot(Storage storage self)\n        internal\n        view\n        returns (bytes32 root)\n    {\n        require(self.initialized, \"Descriptor not initialized\");\n        return self.descriptor.fixRoot;\n    }\n\n    /**\n     * @notice Verify a specific field against the committed descriptor\n     * @param self Storage reference\n     * @param pathCBOR Canonical CBOR bytes of the field path\n     * @param value Raw FIX value bytes\n     * @param proof Merkle proof (sibling hashes)\n     * @param directions Direction array (true=right child, false=left child)\n     * @return valid True if the proof is valid\n     */\n    function verifyFieldProof(\n        Storage storage self,\n        bytes calldata pathCBOR,\n        bytes calldata value,\n        bytes32[] calldata proof,\n        bool[] calldata directions\n    ) internal view returns (bool valid) {\n        require(self.initialized, \"Descriptor not initialized\");\n        return FixMerkleVerifier.verify(\n            self.descriptor.fixRoot,\n            pathCBOR,\n            value,\n            proof,\n            directions\n        );\n    }\n\n    /**\n     * @notice Get CBOR data chunk from SSTORE2 storage\n     * @dev Handles all the complexity of reading from SSTORE2 contract bytecode\n     *      including the STOP byte offset and range validation\n     * @param self Storage reference\n     * @param start Start offset (in the data, not including STOP byte)\n     * @param size Number of bytes to read\n     * @return chunk The requested CBOR data\n     */\n    function getFixCBORChunk(\n        Storage storage self,\n        uint256 start,\n        uint256 size\n    ) internal view returns (bytes memory chunk) {\n        require(self.initialized, \"Descriptor not initialized\");\n        require(self.descriptor.fixCBORPtr != address(0), \"CBOR not deployed\");\n\n        address ptr = self.descriptor.fixCBORPtr;\n\n        // Get code size using extcodesize\n        uint256 codeSize;\n        assembly {\n            codeSize := extcodesize(ptr)\n        }\n\n        require(codeSize > 0, \"No CBOR data\");\n\n        // Data starts at byte 1 (after STOP byte at position 0)\n        // Data length is codeSize - 1\n        uint256 dataLength = codeSize - 1;\n\n        // Validate and adjust range\n        if (start >= dataLength) {\n            return new bytes(0);\n        }\n\n        uint256 end = start + size;\n        if (end > dataLength) {\n            end = dataLength;\n        }\n\n        uint256 actualSize = end - start;\n\n        // Use extcodecopy to read directly from contract bytecode\n        // Add 1 to start to skip the STOP byte (data begins at position 1)\n        chunk = new bytes(actualSize);\n        assembly {\n            extcodecopy(ptr, add(chunk, 0x20), add(start, 1), actualSize)\n        }\n    }\n\n    /**\n     * @notice Get complete CBOR data from SSTORE2 storage\n     * @dev Convenience function to read all CBOR data at once\n     * @param self Storage reference\n     * @return cborData The complete CBOR-encoded descriptor\n     */\n    function getFullCBORData(Storage storage self)\n        internal\n        view\n        returns (bytes memory cborData)\n    {\n        require(self.initialized, \"Descriptor not initialized\");\n        require(self.descriptor.fixCBORPtr != address(0), \"CBOR not deployed\");\n\n        address ptr = self.descriptor.fixCBORPtr;\n        uint256 codeSize;\n        assembly {\n            codeSize := extcodesize(ptr)\n        }\n\n        require(codeSize > 1, \"No CBOR data\");\n\n        // Data starts at byte 1 (after STOP byte)\n        uint256 dataLength = codeSize - 1;\n        cborData = new bytes(dataLength);\n\n        assembly {\n            extcodecopy(ptr, add(cborData, 0x20), 1, dataLength)\n        }\n    }\n\n    /**\n     * @notice Get human-readable FIX descriptor output\n     * @dev Uses dictionaryContract to map tag numbers to names\n     *      Reads full CBOR data and formats as pipe-delimited FIX string\n     * @param self Storage reference\n     * @return Human-readable FIX string (pipe-delimited format)\n     */\n    function getHumanReadable(Storage storage self)\n        internal\n        view\n        returns (string memory)\n    {\n        require(self.initialized, \"Descriptor not initialized\");\n        require(\n            self.descriptor.dictionaryContract != address(0),\n            \"Dictionary not set\"\n        );\n        require(self.descriptor.fixCBORPtr != address(0), \"CBOR not deployed\");\n\n        // Read full CBOR data\n        bytes memory cborData = getFullCBORData(self);\n\n        // Use library to format human-readable output\n        FixDictionary dictionary = FixDictionary(\n            self.descriptor.dictionaryContract\n        );\n        return FixHumanReadable.toHumanReadable(cborData, dictionary);\n    }\n\n    /**\n     * @notice Check if descriptor has been initialized\n     * @param self Storage reference\n     * @return True if descriptor is initialized\n     */\n    function isInitialized(Storage storage self)\n        internal\n        view\n        returns (bool)\n    {\n        return self.initialized;\n    }\n\n    /**\n     * @notice Get the ERC165 interface ID for IFixDescriptor\n     * @return interfaceId The interface ID\n     */\n    function getInterfaceId() internal pure returns (bytes4 interfaceId) {\n        return type(IFixDescriptor).interfaceId;\n    }\n}\n\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\npragma solidity >=0.8.4;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "src/FixMerkleVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nlibrary FixMerkleVerifier {\n    /// @notice Verify a FIX field against a FixDescriptor's Merkle root.\n    /// @param root      The fixRoot stored onchain.\n    /// @param pathCBOR  Canonical CBOR bytes of the path array (e.g., [454,1,456]).\n    /// @param value     Raw FIX value bytes (UTF-8), exactly as used in CBOR.\n    /// @param proof     Sibling hashes bottom-up.\n    /// @param directions Direction bits: false=current is left child; true=current is right child.\n    /// @return ok       True if proof is valid and binds (path,value) to root.\n    function verify(\n        bytes32 root,\n        bytes memory pathCBOR,\n        bytes memory value,\n        bytes32[] memory proof,\n        bool[] memory directions\n    ) internal pure returns (bool ok) {\n        bytes32 node = keccak256(abi.encodePacked(pathCBOR, value));\n        uint256 len = proof.length;\n        for (uint256 i = 0; i < len; i++) {\n            bytes32 sib = proof[i];\n            if (directions[i]) {\n                // current is right child: parent = keccak(sib || node)\n                node = keccak256(abi.encodePacked(sib, node));\n            } else {\n                // current is left child: parent = keccak(node || sib)\n                node = keccak256(abi.encodePacked(node, sib));\n            }\n        }\n        return node == root;\n    }\n}\n\ncontract FixMerkleVerifierHarness {\n    function verifyField(\n        bytes32 root,\n        bytes calldata pathCBOR,\n        bytes calldata value,\n        bytes32[] calldata proof,\n        bool[] calldata directions\n    ) external pure returns (bool) {\n        return FixMerkleVerifier.verify(root, pathCBOR, value, proof, directions);\n    }\n}\n\n\n"
    },
    "src/FixHumanReadable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"./FixCBORReader.sol\";\nimport \"./FixValueParser.sol\";\nimport \"./FixDictionary.sol\";\n\n/// @title FixHumanReadable\n/// @notice Library for generating human-readable FIX descriptor output\n/// @dev Reads CBOR data and formats with tag names from dictionary\nlibrary FixHumanReadable {\n    using FixCBORReader for bytes;\n\n    // CBOR major types\n    uint8 constant MAJOR_TYPE_UINT = 0;\n    uint8 constant MAJOR_TYPE_TEXT = 3;\n    uint8 constant MAJOR_TYPE_ARRAY = 4;\n    uint8 constant MAJOR_TYPE_MAP = 5;\n\n    error DictionaryNotSet();\n    error InvalidCBORData();\n\n    /// @notice Generate human-readable FIX output from CBOR descriptor\n    /// @param cborData Complete CBOR-encoded descriptor\n    /// @param dictionary FixDictionary contract for tag name lookups\n    /// @return Human-readable FIX string in pipe-delimited format\n    function toHumanReadable(bytes memory cborData, FixDictionary dictionary) \n        internal \n        view \n        returns (string memory) \n    {\n        if (address(dictionary) == address(0)) {\n            revert DictionaryNotSet();\n        }\n\n        // Start building output string\n        string memory result = \"\";\n        \n        // Verify root is map\n        require(cborData.length > 0, \"Empty CBOR\");\n        uint8 majorType = uint8(cborData[0]) >> 5;\n        require(majorType == MAJOR_TYPE_MAP, \"Root must be map\");\n\n        // Read map size\n        (uint256 mapSize, uint256 headerSize) = readLength(cborData, 0);\n        uint256 pos = headerSize;\n\n        // Iterate through all key-value pairs\n        for (uint256 i = 0; i < mapSize; i++) {\n            if (i > 0) {\n                result = string(abi.encodePacked(result, \"|\"));\n            }\n\n            // Read tag (key) and advance\n            uint16 tag = readUintKey(cborData, pos);\n            pos = skipElement(cborData, pos);\n\n            // Format this field\n            string memory fieldStr;\n            (fieldStr, pos) = formatField(cborData, pos, tag, dictionary);\n            result = string(abi.encodePacked(result, fieldStr));\n        }\n\n        return result;\n    }\n\n    /// @notice Format a single field (scalar or group)\n    /// @param cbor CBOR data\n    /// @param pos Position of value\n    /// @param tag Field tag\n    /// @param dictionary Dictionary for lookups\n    /// @return fieldStr Formatted field string\n    /// @return newPos New position after field\n    function formatField(\n        bytes memory cbor,\n        uint256 pos,\n        uint16 tag,\n        FixDictionary dictionary\n    ) internal view returns (string memory fieldStr, uint256 newPos) {\n        // Get tag name from dictionary\n        string memory tagName = dictionary.getTagName(tag);\n        if (bytes(tagName).length == 0) {\n            tagName = uintToString(tag);\n        }\n\n        uint8 valueMajorType = uint8(cbor[pos]) >> 5;\n\n        if (valueMajorType == MAJOR_TYPE_TEXT) {\n            // Scalar value\n            string memory value = extractTextValue(cbor, pos);\n            fieldStr = string(abi.encodePacked(tagName, \"=\", value));\n            newPos = skipElement(cbor, pos);\n        } else if (valueMajorType == MAJOR_TYPE_ARRAY) {\n            // Group\n            fieldStr = formatGroup(cbor, pos, tag, dictionary);\n            newPos = skipElement(cbor, pos);\n        } else {\n            // Other types - skip\n            fieldStr = \"\";\n            newPos = skipElement(cbor, pos);\n        }\n    }\n\n    /// @notice Format a group (array) with its entries\n    /// @param cbor CBOR data\n    /// @param arrayPos Position of array in CBOR\n    /// @param groupTag Tag number of the group\n    /// @param dictionary Dictionary for lookups\n    /// @return Formatted group string\n    function formatGroup(\n        bytes memory cbor,\n        uint256 arrayPos,\n        uint16 groupTag,\n        FixDictionary dictionary\n    ) internal view returns (string memory) {\n        (uint256 arrayLength, uint256 headerSize) = readLength(cbor, arrayPos);\n        \n        string memory groupName = dictionary.getTagName(groupTag);\n        if (bytes(groupName).length == 0) {\n            groupName = uintToString(groupTag);\n        }\n\n        string memory result = string(abi.encodePacked(groupName, \"=\", uintToString(arrayLength)));\n        \n        uint256 entryPos = arrayPos + headerSize;\n\n        // Format each entry\n        for (uint256 i = 0; i < arrayLength; i++) {\n            // Each entry should be a map\n            uint8 entryMajorType = uint8(cbor[entryPos]) >> 5;\n            require(entryMajorType == MAJOR_TYPE_MAP, \"Group entry must be map\");\n\n            (uint256 entryMapSize, uint256 entryHeaderSize) = readLength(cbor, entryPos);\n            uint256 fieldPos = entryPos + entryHeaderSize;\n\n            result = string(abi.encodePacked(result, \"|[\", uintToString(i), \"]\"));\n\n            // Format each field in the entry\n            for (uint256 j = 0; j < entryMapSize; j++) {\n                if (j > 0) {\n                    result = string(abi.encodePacked(result, \",\"));\n                }\n\n                // Read field tag\n                uint16 fieldTag = readUintKey(cbor, fieldPos);\n                fieldPos = skipElement(cbor, fieldPos);\n\n                // Get field name\n                string memory fieldName = dictionary.getTagName(fieldTag);\n                if (bytes(fieldName).length == 0) {\n                    fieldName = uintToString(fieldTag);\n                }\n\n                // Read field value\n                uint8 fieldValueType = uint8(cbor[fieldPos]) >> 5;\n                \n                if (fieldValueType == MAJOR_TYPE_TEXT) {\n                    string memory fieldValue = extractTextValue(cbor, fieldPos);\n                    result = string(abi.encodePacked(result, fieldName, \"=\", fieldValue));\n                    fieldPos = skipElement(cbor, fieldPos);\n                } else {\n                    // Skip non-text values for now\n                    fieldPos = skipElement(cbor, fieldPos);\n                }\n            }\n\n            entryPos = skipElement(cbor, entryPos);\n        }\n\n        return result;\n    }\n\n    /// @notice Extract text string value from CBOR\n    /// @param cbor CBOR data\n    /// @param pos Position of text value\n    /// @return Extracted string\n    function extractTextValue(bytes memory cbor, uint256 pos) internal pure returns (string memory) {\n        (uint256 length, uint256 headerSize) = readLength(cbor, pos);\n        \n        bytes memory value = new bytes(length);\n        for (uint256 i = 0; i < length; i++) {\n            value[i] = cbor[pos + headerSize + i];\n        }\n        \n        return string(value);\n    }\n\n    /// @notice Read uint key from CBOR at position\n    function readUintKey(bytes memory cbor, uint256 pos) internal pure returns (uint16) {\n        require(pos < cbor.length, \"Position out of bounds\");\n        \n        uint8 initialByte = uint8(cbor[pos]);\n        uint8 majorType = initialByte >> 5;\n        require(majorType == MAJOR_TYPE_UINT, \"Key must be uint\");\n        \n        uint8 additionalInfo = initialByte & 0x1F;\n        \n        if (additionalInfo < 24) {\n            return uint16(additionalInfo);\n        } else if (additionalInfo == 24) {\n            require(pos + 1 < cbor.length, \"Truncated uint8\");\n            return uint16(uint8(cbor[pos + 1]));\n        } else if (additionalInfo == 25) {\n            require(pos + 2 < cbor.length, \"Truncated uint16\");\n            return uint16(uint8(cbor[pos + 1])) << 8 | uint16(uint8(cbor[pos + 2]));\n        } else {\n            revert(\"Unsupported key size\");\n        }\n    }\n\n    /// @notice Skip one CBOR element and return position after it\n    function skipElement(bytes memory cbor, uint256 pos) internal pure returns (uint256) {\n        require(pos < cbor.length, \"Position out of bounds\");\n        \n        uint8 initialByte = uint8(cbor[pos]);\n        uint8 majorType = initialByte >> 5;\n        uint8 additionalInfo = initialByte & 0x1F;\n        \n        (uint256 length, uint256 headerSize) = readLengthAtPos(cbor, pos, additionalInfo);\n        \n        if (majorType == MAJOR_TYPE_UINT || majorType == 1) {\n            return pos + headerSize;\n        } else if (majorType == 2 || majorType == MAJOR_TYPE_TEXT) {\n            return pos + headerSize + length;\n        } else if (majorType == MAJOR_TYPE_ARRAY) {\n            pos += headerSize;\n            for (uint256 i = 0; i < length; i++) {\n                pos = skipElement(cbor, pos);\n            }\n            return pos;\n        } else if (majorType == MAJOR_TYPE_MAP) {\n            pos += headerSize;\n            for (uint256 i = 0; i < length; i++) {\n                pos = skipElement(cbor, pos);\n                pos = skipElement(cbor, pos);\n            }\n            return pos;\n        } else {\n            revert(\"Unsupported major type\");\n        }\n    }\n\n    /// @notice Read length from CBOR header at position\n    function readLength(bytes memory cbor, uint256 pos) \n        internal \n        pure \n        returns (uint256 length, uint256 headerSize) \n    {\n        require(pos < cbor.length, \"Position out of bounds\");\n        uint8 additionalInfo = uint8(cbor[pos]) & 0x1F;\n        return readLengthAtPos(cbor, pos, additionalInfo);\n    }\n\n    /// @notice Read length given additional info\n    function readLengthAtPos(bytes memory cbor, uint256 pos, uint8 additionalInfo)\n        internal\n        pure\n        returns (uint256 length, uint256 headerSize)\n    {\n        if (additionalInfo < 24) {\n            return (additionalInfo, 1);\n        } else if (additionalInfo == 24) {\n            require(pos + 1 < cbor.length, \"Truncated length\");\n            return (uint8(cbor[pos + 1]), 2);\n        } else if (additionalInfo == 25) {\n            require(pos + 2 < cbor.length, \"Truncated length\");\n            uint256 len = (uint256(uint8(cbor[pos + 1])) << 8) | uint256(uint8(cbor[pos + 2]));\n            return (len, 3);\n        } else if (additionalInfo == 26) {\n            require(pos + 4 < cbor.length, \"Truncated length\");\n            uint256 len = (uint256(uint8(cbor[pos + 1])) << 24) \n                | (uint256(uint8(cbor[pos + 2])) << 16)\n                | (uint256(uint8(cbor[pos + 3])) << 8) \n                | uint256(uint8(cbor[pos + 4]));\n            return (len, 5);\n        } else {\n            revert(\"Unsupported length encoding\");\n        }\n    }\n\n    /// @notice Convert uint to string\n    /// @param value Number to convert\n    /// @return String representation\n    function uintToString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0\";\n        }\n        \n        uint256 temp = value;\n        uint256 digits;\n        \n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        \n        bytes memory buffer = new bytes(digits);\n        \n        while (value != 0) {\n            digits--;\n            buffer[digits] = bytes1(uint8(48 + (value % 10)));\n            value /= 10;\n        }\n        \n        return string(buffer);\n    }\n}\n\n"
    },
    "src/FixDictionary.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title FixDictionary\n/// @notice Immutable on-chain dictionary mapping FIX tag numbers to tag names\n/// @dev Uses SSTORE2 pattern with fixed 24-byte slots for O(1) lookups\ncontract FixDictionary {\n    /// @notice SSTORE2 pointer to dictionary data\n    address public immutable dataContract;\n\n    /// @notice Maximum tag number supported (FIX 4.4 has tags 1-957)\n    uint16 public constant MAX_TAG = 957;\n\n    /// @notice Size of each dictionary slot in bytes\n    uint8 public constant SLOT_SIZE = 24;\n\n    error TagOutOfRange(uint16 tag);\n    error InvalidDataContract();\n\n    /// @notice Constructor deploys dictionary data as SSTORE2 contract\n    /// @param data Fixed-length dictionary data ((MAX_TAG + 1) * SLOT_SIZE bytes, includes slot 0)\n    constructor(bytes memory data) {\n        require(data.length == (MAX_TAG + 1) * SLOT_SIZE, \"Invalid data length\");\n        \n        // Deploy as SSTORE2 contract\n        // Create init code: PUSH data.length PUSH 0 PUSH 0 CODECOPY PUSH data.length PUSH 0 RETURN\n        // Then append the data\n        bytes memory initCode = abi.encodePacked(\n            // Copy data to memory starting at 0\n            hex\"63\", // PUSH4\n            uint32(data.length + 1), // data length + STOP byte\n            hex\"80600E6000396000F300\", // DUP1 PUSH1 0x0E PUSH1 0 CODECOPY PUSH1 0 RETURN STOP\n            data\n        );\n        \n        address pointer;\n        assembly {\n            pointer := create(0, add(initCode, 0x20), mload(initCode))\n        }\n        \n        require(pointer != address(0), \"Deployment failed\");\n        dataContract = pointer;\n    }\n\n    /// @notice Get tag name for a single tag\n    /// @param tag FIX tag number (1-957)\n    /// @return name Tag name string (empty if tag not defined)\n    function getTagName(uint16 tag) public view returns (string memory name) {\n        if (tag == 0 || tag > MAX_TAG) {\n            revert TagOutOfRange(tag);\n        }\n\n        // Calculate offset: tag * SLOT_SIZE\n        // Add 1 to skip STOP byte in SSTORE2 contract\n        uint256 offset = tag * SLOT_SIZE + 1;\n        \n        // Read 24-byte slot\n        bytes memory slot = new bytes(SLOT_SIZE);\n        address ptr = dataContract;\n        assembly {\n            extcodecopy(\n                ptr,\n                add(slot, 0x20),\n                offset,\n                mload(slot)\n            )\n        }\n\n        // First byte is length\n        uint8 length = uint8(slot[0]);\n        \n        // If length is 0, tag is not defined\n        if (length == 0) {\n            return \"\";\n        }\n\n        // Extract name bytes (skip first byte which is length)\n        bytes memory nameBytes = new bytes(length);\n        for (uint256 i = 0; i < length; i++) {\n            nameBytes[i] = slot[i + 1];\n        }\n\n        return string(nameBytes);\n    }\n\n    /// @notice Get tag names for multiple tags (batch operation)\n    /// @param tags Array of FIX tag numbers\n    /// @return names Array of tag name strings\n    function getTagNames(uint16[] calldata tags) external view returns (string[] memory names) {\n        names = new string[](tags.length);\n        for (uint256 i = 0; i < tags.length; i++) {\n            names[i] = getTagName(tags[i]);\n        }\n    }\n\n    /// @notice Check if a tag is defined in the dictionary\n    /// @param tag FIX tag number\n    /// @return True if tag has a name defined\n    function hasTag(uint16 tag) external view returns (bool) {\n        if (tag == 0 || tag > MAX_TAG) {\n            return false;\n        }\n\n        uint256 offset = tag * SLOT_SIZE + 1;\n        \n        // Read just the length byte\n        bytes1 lengthByte;\n        address ptr = dataContract;\n        assembly {\n            let tmpPtr := mload(0x40)\n            extcodecopy(\n                ptr,\n                tmpPtr,\n                offset,\n                1\n            )\n            lengthByte := mload(tmpPtr)\n        }\n\n        return lengthByte != 0x00;\n    }\n\n    /// @notice Get raw 24-byte slot data for a tag\n    /// @param tag FIX tag number\n    /// @return Slot data (for debugging/inspection)\n    function getSlot(uint16 tag) external view returns (bytes memory) {\n        if (tag == 0 || tag > MAX_TAG) {\n            revert TagOutOfRange(tag);\n        }\n\n        uint256 offset = tag * SLOT_SIZE + 1;\n        bytes memory slot = new bytes(SLOT_SIZE);\n        address ptr = dataContract;\n        \n        assembly {\n            extcodecopy(\n                ptr,\n                add(slot, 0x20),\n                offset,\n                mload(slot)\n            )\n        }\n\n        return slot;\n    }\n}\n\n"
    },
    "src/FixCBORReader.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title FixCBORReader\n/// @notice Gas-efficient library for reading FIX tag values from canonical CBOR-encoded descriptors\n/// @dev Exploits CBOR canonical properties (sorted keys, definite lengths) for efficient field lookup\nlibrary FixCBORReader {\n    struct ReadResult {\n        bytes value; // Raw CBOR-encoded value bytes (including header)\n        bool found; // Whether tag was found\n    }\n\n    // CBOR major types\n    uint8 constant MAJOR_TYPE_UINT = 0;\n    uint8 constant MAJOR_TYPE_NEGINT = 1;\n    uint8 constant MAJOR_TYPE_BYTES = 2;\n    uint8 constant MAJOR_TYPE_TEXT = 3;\n    uint8 constant MAJOR_TYPE_ARRAY = 4;\n    uint8 constant MAJOR_TYPE_MAP = 5;\n\n    // Length encoding constants\n    uint8 constant ADDL_INFO_UINT8 = 24;\n    uint8 constant ADDL_INFO_UINT16 = 25;\n    uint8 constant ADDL_INFO_UINT32 = 26;\n\n    /// @notice Read a FIX tag value from canonical CBOR descriptor\n    /// @param cbor The complete CBOR-encoded descriptor\n    /// @param tag The FIX tag to search for\n    /// @return result Raw value bytes and found status\n    function getField(bytes memory cbor, uint16 tag) internal pure returns (ReadResult memory result) {\n        require(cbor.length > 0, \"Empty CBOR\");\n\n        // Verify root is map (major type 5)\n        uint8 majorType = uint8(cbor[0]) >> 5;\n        require(majorType == MAJOR_TYPE_MAP, \"Root must be map\");\n\n        // Read map size\n        (uint256 mapSize, uint256 headerSize) = readLength(cbor, 0);\n        uint256 pos = headerSize;\n\n        // Handle empty map\n        if (mapSize == 0) {\n            return ReadResult(new bytes(0), false);\n        }\n\n        // Binary search through sorted map keys\n        uint256 left = 0;\n        uint256 right = mapSize - 1;\n\n        while (left <= right) {\n            uint256 mid = (left + right) / 2;\n\n            // Navigate to mid-th key-value pair\n            uint256 pairPos = skipToPair(cbor, pos, mid);\n\n            // Read key (must be unsigned int)\n            uint16 currentTag = readUintKey(cbor, pairPos);\n\n            if (currentTag == tag) {\n                // Found! Extract value bytes\n                uint256 valuePos = advancePastKey(cbor, pairPos);\n                bytes memory value = extractValueBytes(cbor, valuePos);\n                return ReadResult(value, true);\n            } else if (currentTag < tag) {\n                left = mid + 1;\n            } else {\n                // Avoid underflow when mid = 0\n                if (mid == 0) break;\n                right = mid - 1;\n            }\n        }\n\n        // Not found\n        return ReadResult(new bytes(0), false);\n    }\n\n    /// @notice Read a field within a group using path notation\n    /// @param cbor The complete CBOR-encoded descriptor\n    /// @param path Array of [groupTag, index, fieldTag] or nested paths\n    /// @return result Raw value bytes and found status\n    /// @dev Example: [453, 0, 448] reads first Party's PartyID\n    function getFieldByPath(bytes memory cbor, uint16[] memory path) internal pure returns (ReadResult memory result) {\n        require(path.length > 0, \"Empty path\");\n\n        // Single element path - direct field lookup\n        if (path.length == 1) {\n            return getField(cbor, path[0]);\n        }\n\n        // Navigate through path segments\n        bytes memory currentCBOR = cbor;\n\n        // Process pairs of (groupTag, index)\n        for (uint256 i = 0; i < path.length - 1; i += 2) {\n            require(i + 1 < path.length, \"Invalid path: missing index\");\n\n            uint16 groupTag = path[i];\n            uint256 index = path[i + 1];\n\n            // Find the group\n            ReadResult memory groupResult = getField(currentCBOR, groupTag);\n            if (!groupResult.found) {\n                return ReadResult(new bytes(0), false);\n            }\n\n            // Verify it's an array\n            uint8 majorType = uint8(groupResult.value[0]) >> 5;\n            require(majorType == MAJOR_TYPE_ARRAY, \"Expected array for group\");\n\n            // Get the array element at index\n            currentCBOR = getArrayElement(groupResult.value, index);\n            if (currentCBOR.length == 0) {\n                return ReadResult(new bytes(0), false);\n            }\n        }\n\n        // Final segment is the field tag\n        uint16 finalTag = path[path.length - 1];\n        return getField(currentCBOR, finalTag);\n    }\n\n    /// @notice Extract element at index from CBOR array\n    /// @param arrayBytes CBOR-encoded array\n    /// @param index Zero-based index\n    /// @return Element bytes (empty if out of bounds)\n    function getArrayElement(bytes memory arrayBytes, uint256 index) internal pure returns (bytes memory) {\n        require(arrayBytes.length > 0, \"Empty array bytes\");\n\n        uint8 majorType = uint8(arrayBytes[0]) >> 5;\n        require(majorType == MAJOR_TYPE_ARRAY, \"Not an array\");\n\n        (uint256 arrayLength, uint256 headerSize) = readLength(arrayBytes, 0);\n\n        if (index >= arrayLength) {\n            return new bytes(0);\n        }\n\n        uint256 pos = headerSize;\n\n        // Skip to index-th element\n        for (uint256 i = 0; i < index; i++) {\n            pos = skipElement(arrayBytes, pos);\n        }\n\n        // Extract the element\n        uint256 elementStart = pos;\n        uint256 elementEnd = skipElement(arrayBytes, pos);\n\n        bytes memory element = new bytes(elementEnd - elementStart);\n        for (uint256 i = 0; i < element.length; i++) {\n            element[i] = arrayBytes[elementStart + i];\n        }\n\n        return element;\n    }\n\n    /// @notice Skip to the N-th key-value pair in a map\n    /// @param cbor CBOR bytes\n    /// @param startPos Position after map header\n    /// @param pairIndex Zero-based pair index\n    /// @return Position of the target pair's key\n    function skipToPair(bytes memory cbor, uint256 startPos, uint256 pairIndex) internal pure returns (uint256) {\n        uint256 pos = startPos;\n\n        for (uint256 i = 0; i < pairIndex; i++) {\n            pos = skipElement(cbor, pos); // skip key\n            pos = skipElement(cbor, pos); // skip value\n        }\n\n        return pos;\n    }\n\n    /// @notice Skip one CBOR element and return position after it\n    /// @param cbor CBOR bytes\n    /// @param pos Current position\n    /// @return Position after the element\n    function skipElement(bytes memory cbor, uint256 pos) internal pure returns (uint256) {\n        require(pos < cbor.length, \"Position out of bounds\");\n\n        uint8 initialByte = uint8(cbor[pos]);\n        uint8 majorType = initialByte >> 5;\n        uint8 additionalInfo = initialByte & 0x1F;\n\n        (uint256 length, uint256 headerSize) = readLengthAtPos(cbor, pos, additionalInfo);\n\n        if (majorType == MAJOR_TYPE_UINT || majorType == MAJOR_TYPE_NEGINT) {\n            // Integer types - just header\n            return pos + headerSize;\n        } else if (majorType == MAJOR_TYPE_BYTES || majorType == MAJOR_TYPE_TEXT) {\n            // Byte/text string - header + payload\n            return pos + headerSize + length;\n        } else if (majorType == MAJOR_TYPE_ARRAY) {\n            // Array - skip header, then skip each element\n            pos += headerSize;\n            for (uint256 i = 0; i < length; i++) {\n                pos = skipElement(cbor, pos);\n            }\n            return pos;\n        } else if (majorType == MAJOR_TYPE_MAP) {\n            // Map - skip header, then skip key-value pairs\n            pos += headerSize;\n            for (uint256 i = 0; i < length; i++) {\n                pos = skipElement(cbor, pos); // key\n                pos = skipElement(cbor, pos); // value\n            }\n            return pos;\n        } else {\n            revert(\"Unsupported major type\");\n        }\n    }\n\n    /// @notice Read uint key from CBOR at position\n    /// @param cbor CBOR bytes\n    /// @param pos Position of key\n    /// @return Key as uint16\n    function readUintKey(bytes memory cbor, uint256 pos) internal pure returns (uint16) {\n        require(pos < cbor.length, \"Position out of bounds\");\n\n        uint8 initialByte = uint8(cbor[pos]);\n        uint8 majorType = initialByte >> 5;\n        require(majorType == MAJOR_TYPE_UINT, \"Key must be uint\");\n\n        uint8 additionalInfo = initialByte & 0x1F;\n\n        if (additionalInfo < 24) {\n            return uint16(additionalInfo);\n        } else if (additionalInfo == ADDL_INFO_UINT8) {\n            require(pos + 1 < cbor.length, \"Truncated uint8\");\n            return uint16(uint8(cbor[pos + 1]));\n        } else if (additionalInfo == ADDL_INFO_UINT16) {\n            require(pos + 2 < cbor.length, \"Truncated uint16\");\n            return uint16(uint8(cbor[pos + 1])) << 8 | uint16(uint8(cbor[pos + 2]));\n        } else {\n            revert(\"Unsupported key size\");\n        }\n    }\n\n    /// @notice Advance position past the key\n    /// @param cbor CBOR bytes\n    /// @param pos Position of key\n    /// @return Position after key (at value)\n    function advancePastKey(bytes memory cbor, uint256 pos) internal pure returns (uint256) {\n        return skipElement(cbor, pos);\n    }\n\n    /// @notice Extract complete value bytes including CBOR header\n    /// @param cbor CBOR bytes\n    /// @param pos Position of value\n    /// @return Value bytes\n    function extractValueBytes(bytes memory cbor, uint256 pos) internal pure returns (bytes memory) {\n        uint256 endPos = skipElement(cbor, pos);\n        uint256 valueLength = endPos - pos;\n\n        bytes memory value = new bytes(valueLength);\n        for (uint256 i = 0; i < valueLength; i++) {\n            value[i] = cbor[pos + i];\n        }\n\n        return value;\n    }\n\n    /// @notice Read length from CBOR header at position\n    /// @param cbor CBOR bytes\n    /// @param pos Position of CBOR element\n    /// @return length The length value\n    /// @return headerSize Size of the header in bytes\n    function readLength(bytes memory cbor, uint256 pos) internal pure returns (uint256 length, uint256 headerSize) {\n        require(pos < cbor.length, \"Position out of bounds\");\n\n        uint8 additionalInfo = uint8(cbor[pos]) & 0x1F;\n        return readLengthAtPos(cbor, pos, additionalInfo);\n    }\n\n    /// @notice Read length given additional info\n    /// @param cbor CBOR bytes\n    /// @param pos Position of CBOR element\n    /// @param additionalInfo The 5-bit additional info field\n    /// @return length The length value\n    /// @return headerSize Size of the header in bytes\n    function readLengthAtPos(bytes memory cbor, uint256 pos, uint8 additionalInfo)\n        internal\n        pure\n        returns (uint256 length, uint256 headerSize)\n    {\n        if (additionalInfo < 24) {\n            return (additionalInfo, 1);\n        } else if (additionalInfo == ADDL_INFO_UINT8) {\n            require(pos + 1 < cbor.length, \"Truncated length\");\n            return (uint8(cbor[pos + 1]), 2);\n        } else if (additionalInfo == ADDL_INFO_UINT16) {\n            require(pos + 2 < cbor.length, \"Truncated length\");\n            uint256 len = (uint256(uint8(cbor[pos + 1])) << 8) | uint256(uint8(cbor[pos + 2]));\n            return (len, 3);\n        } else if (additionalInfo == ADDL_INFO_UINT32) {\n            require(pos + 4 < cbor.length, \"Truncated length\");\n            uint256 len = (uint256(uint8(cbor[pos + 1])) << 24) | (uint256(uint8(cbor[pos + 2])) << 16)\n                | (uint256(uint8(cbor[pos + 3])) << 8) | uint256(uint8(cbor[pos + 4]));\n            return (len, 5);\n        } else {\n            revert(\"Unsupported length encoding\");\n        }\n    }\n}\n"
    },
    "src/FixValueParser.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title FixValueParser\n/// @notice Library for extracting and parsing FIX field values from CBOR-encoded bytes\n/// @dev Works with raw CBOR value bytes returned by FixCBORReader\nlibrary FixValueParser {\n    // CBOR major types\n    uint8 constant MAJOR_TYPE_TEXT = 3;\n\n    /// @notice Extract UTF-8 string from CBOR text string value\n    /// @param cborValue Raw CBOR-encoded value (including header)\n    /// @return Decoded UTF-8 string\n    function extractString(bytes memory cborValue) internal pure returns (string memory) {\n        require(cborValue.length > 0, \"Empty CBOR value\");\n\n        uint8 majorType = uint8(cborValue[0]) >> 5;\n        require(majorType == MAJOR_TYPE_TEXT, \"Expected text string\");\n\n        (uint256 length, uint256 headerSize) = readTextLength(cborValue, 0);\n\n        require(cborValue.length >= headerSize + length, \"Truncated text string\");\n\n        bytes memory result = new bytes(length);\n        for (uint256 i = 0; i < length; i++) {\n            result[i] = cborValue[headerSize + i];\n        }\n\n        return string(result);\n    }\n\n    /// @notice Parse FIX decimal string to fixed-point integer\n    /// @param cborValue Raw CBOR-encoded value\n    /// @param decimals Number of decimal places to preserve\n    /// @return Fixed-point integer (e.g., \"4.250\" with decimals=3 returns 4250)\n    function parseFixedPoint(bytes memory cborValue, uint8 decimals) internal pure returns (uint256) {\n        string memory str = extractString(cborValue);\n        bytes memory strBytes = bytes(str);\n        require(strBytes.length > 0, \"Empty value\");\n\n        // Parse integer and fractional parts\n        (uint256 integerPart, uint256 fractionalPart, uint256 fractionalDigits) = \n            _parseDecimalString(strBytes);\n\n        // Convert to fixed-point\n        return _convertToFixedPoint(integerPart, fractionalPart, fractionalDigits, decimals);\n    }\n\n    /// @notice Internal helper to parse decimal string into parts\n    /// @param strBytes Byte array of decimal string\n    /// @return integerPart Integer portion\n    /// @return fractionalPart Fractional portion\n    /// @return fractionalDigits Number of fractional digits\n    function _parseDecimalString(bytes memory strBytes) \n        private \n        pure \n        returns (uint256 integerPart, uint256 fractionalPart, uint256 fractionalDigits) \n    {\n        uint256 i = 0;\n        \n        // Parse integer part\n        while (i < strBytes.length && strBytes[i] != bytes1(\".\")) {\n            require(strBytes[i] >= \"0\" && strBytes[i] <= \"9\", \"Invalid digit\");\n            integerPart = integerPart * 10 + uint8(strBytes[i]) - uint8(bytes1(\"0\"));\n            i++;\n        }\n\n        // Parse fractional part if exists\n        if (i < strBytes.length && strBytes[i] == bytes1(\".\")) {\n            i++; // skip '.'\n            while (i < strBytes.length) {\n                require(strBytes[i] >= \"0\" && strBytes[i] <= \"9\", \"Invalid digit\");\n                fractionalPart = fractionalPart * 10 + uint8(strBytes[i]) - uint8(bytes1(\"0\"));\n                fractionalDigits++;\n                i++;\n            }\n        }\n    }\n\n    /// @notice Internal helper to convert parsed decimal to fixed-point\n    /// @param integerPart Integer portion\n    /// @param fractionalPart Fractional portion\n    /// @param fractionalDigits Number of fractional digits\n    /// @param decimals Target decimal places\n    /// @return Fixed-point result\n    function _convertToFixedPoint(\n        uint256 integerPart,\n        uint256 fractionalPart,\n        uint256 fractionalDigits,\n        uint8 decimals\n    ) private pure returns (uint256) {\n        uint256 result = integerPart * (10 ** decimals);\n\n        if (fractionalDigits > 0) {\n            if (fractionalDigits <= decimals) {\n                // Pad with zeros if needed\n                result += fractionalPart * (10 ** (decimals - fractionalDigits));\n            } else {\n                // Truncate if too many digits\n                result += fractionalPart / (10 ** (fractionalDigits - decimals));\n            }\n        }\n\n        return result;\n    }\n\n    /// @notice Parse FIX date string (YYYYMMDD format) to Unix timestamp\n    /// @param cborValue Raw CBOR-encoded value\n    /// @return Unix timestamp (seconds since epoch)\n    function parseDate(bytes memory cborValue) internal pure returns (uint256) {\n        string memory str = extractString(cborValue);\n        bytes memory strBytes = bytes(str);\n\n        require(strBytes.length == 8, \"Invalid date format\");\n\n        // Extract YYYYMMDD\n        uint256 year = parseDigits(strBytes, 0, 4);\n        uint256 month = parseDigits(strBytes, 4, 2);\n        uint256 day = parseDigits(strBytes, 6, 2);\n\n        require(year >= 1970, \"Year before epoch\");\n        require(month >= 1 && month <= 12, \"Invalid month\");\n        require(day >= 1 && day <= 31, \"Invalid day\");\n\n        // Simple timestamp calculation (not accounting for all leap years, timezones, etc.)\n        // This is a basic implementation - use a proper date library for production\n        uint256 timestamp = 0;\n\n        // Days from epoch (1970-01-01) - simplified calculation\n        for (uint256 y = 1970; y < year; y++) {\n            if (isLeapYear(y)) {\n                timestamp += 366 days;\n            } else {\n                timestamp += 365 days;\n            }\n        }\n\n        // Add days for months\n        uint256[12] memory daysInMonth = [\n            uint256(31),\n            28,\n            31,\n            30,\n            31,\n            30,\n            31,\n            31,\n            30,\n            31,\n            30,\n            31\n        ];\n\n        if (isLeapYear(year)) {\n            daysInMonth[1] = 29;\n        }\n\n        for (uint256 m = 1; m < month; m++) {\n            timestamp += daysInMonth[m - 1] * 1 days;\n        }\n\n        // Add remaining days\n        timestamp += (day - 1) * 1 days;\n\n        return timestamp;\n    }\n\n    /// @notice Parse FIX integer value\n    /// @param cborValue Raw CBOR-encoded value\n    /// @return Integer value\n    function parseInt(bytes memory cborValue) internal pure returns (uint256) {\n        string memory str = extractString(cborValue);\n        bytes memory strBytes = bytes(str);\n\n        require(strBytes.length > 0, \"Empty value\");\n\n        uint256 result = 0;\n        for (uint256 i = 0; i < strBytes.length; i++) {\n            require(strBytes[i] >= \"0\" && strBytes[i] <= \"9\", \"Invalid digit\");\n            result = result * 10 + uint8(strBytes[i]) - uint8(bytes1(\"0\"));\n        }\n\n        return result;\n    }\n\n    /// @notice Check if value exists and is non-empty\n    /// @param cborValue Raw CBOR-encoded value\n    /// @return True if value is non-empty\n    function isPresent(bytes memory cborValue) internal pure returns (bool) {\n        if (cborValue.length == 0) return false;\n\n        uint8 majorType = uint8(cborValue[0]) >> 5;\n        if (majorType != MAJOR_TYPE_TEXT) return false;\n\n        (uint256 length,) = readTextLength(cborValue, 0);\n        return length > 0;\n    }\n\n    /// @notice Read text string length from CBOR header\n    /// @param cbor CBOR bytes\n    /// @param pos Position of text string\n    /// @return length String length\n    /// @return headerSize Header size in bytes\n    function readTextLength(bytes memory cbor, uint256 pos)\n        internal\n        pure\n        returns (uint256 length, uint256 headerSize)\n    {\n        require(pos < cbor.length, \"Position out of bounds\");\n\n        uint8 additionalInfo = uint8(cbor[pos]) & 0x1F;\n\n        if (additionalInfo < 24) {\n            return (additionalInfo, 1);\n        } else if (additionalInfo == 24) {\n            require(pos + 1 < cbor.length, \"Truncated length\");\n            return (uint8(cbor[pos + 1]), 2);\n        } else if (additionalInfo == 25) {\n            require(pos + 2 < cbor.length, \"Truncated length\");\n            uint256 len = (uint256(uint8(cbor[pos + 1])) << 8) | uint256(uint8(cbor[pos + 2]));\n            return (len, 3);\n        } else if (additionalInfo == 26) {\n            require(pos + 4 < cbor.length, \"Truncated length\");\n            uint256 len = (uint256(uint8(cbor[pos + 1])) << 24) | (uint256(uint8(cbor[pos + 2])) << 16)\n                | (uint256(uint8(cbor[pos + 3])) << 8) | uint256(uint8(cbor[pos + 4]));\n            return (len, 5);\n        } else {\n            revert(\"Unsupported length encoding\");\n        }\n    }\n\n    /// @notice Parse specified number of digits from byte array\n    /// @param data Byte array containing digits\n    /// @param start Start position\n    /// @param length Number of digits to parse\n    /// @return Parsed number\n    function parseDigits(bytes memory data, uint256 start, uint256 length) internal pure returns (uint256) {\n        require(start + length <= data.length, \"Out of bounds\");\n\n        uint256 result = 0;\n        for (uint256 i = 0; i < length; i++) {\n            bytes1 b = data[start + i];\n            require(b >= \"0\" && b <= \"9\", \"Invalid digit\");\n            result = result * 10 + uint8(b) - uint8(bytes1(\"0\"));\n        }\n\n        return result;\n    }\n\n    /// @notice Check if year is leap year\n    /// @param year Year to check\n    /// @return True if leap year\n    function isLeapYear(uint256 year) internal pure returns (bool) {\n        if (year % 4 != 0) return false;\n        if (year % 100 != 0) return true;\n        if (year % 400 != 0) return false;\n        return true;\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
      "forge-std/=lib/forge-std/src/",
      "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
      "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "useLiteralContent": false,
      "bytecodeHash": "ipfs",
      "appendCBOR": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode.object",
          "evm.bytecode.sourceMap",
          "evm.bytecode.linkReferences",
          "evm.deployedBytecode.object",
          "evm.deployedBytecode.sourceMap",
          "evm.deployedBytecode.linkReferences",
          "evm.deployedBytecode.immutableReferences",
          "evm.methodIdentifiers",
          "metadata"
        ]
      }
    },
    "evmVersion": "cancun",
    "viaIR": true,
    "libraries": {}
  }
}
