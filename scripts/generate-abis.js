#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Paths
const contractsOutDir = path.join(__dirname, '../contracts/out');
const webAbisDir = path.join(__dirname, '../apps/web/lib/abis');

// Contracts to generate ABIs for
const contracts = [
  'DataContractFactory',
  'AssetTokenFactory',
  'IFixDescriptor',
  'AssetTokenERC20',
  'AssetTokenERC721',
  'FixMerkleVerifier'
];

// Ensure output directory exists
if (!fs.existsSync(webAbisDir)) {
  fs.mkdirSync(webAbisDir, { recursive: true });
}

contracts.forEach(contractName => {
  const jsonPath = path.join(contractsOutDir, `${contractName}.sol`, `${contractName}.json`);
  
  if (!fs.existsSync(jsonPath)) {
    console.warn(`‚ö†Ô∏è  Contract JSON not found: ${jsonPath}`);
    return;
  }

  try {
    // Read the Foundry-generated JSON
    const contractJson = JSON.parse(fs.readFileSync(jsonPath, 'utf8'));
    
    // Extract the ABI
    const abi = contractJson.abi;
    
    if (!abi) {
      console.warn(`‚ö†Ô∏è  No ABI found in ${contractName}.json`);
      return;
    }

    // Generate TypeScript content
    const tsContent = `// Auto-generated from Foundry contract compilation
// Do not edit this file manually - run 'npm run generate-abis' to regenerate

export const abi = ${JSON.stringify(abi, null, 2)} as const;

export type ${contractName}Abi = typeof abi;
`;

    // Write the TypeScript file
    const tsPath = path.join(webAbisDir, `${contractName}.ts`);
    fs.writeFileSync(tsPath, tsContent);
    
    console.log(`‚úÖ Generated ABI: ${contractName}.ts`);
    
  } catch (error) {
    console.error(`‚ùå Error processing ${contractName}:`, error.message);
  }
});

console.log(`\nüéâ ABI generation complete! Generated ${contracts.length} TypeScript ABI files.`);
